# -*- coding: utf-8 -*-
"""pitchHeat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XGzFcXiJMIQaOu5txO21DRfAU1La5i1z
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import Dropdown, interact, DatePicker, widgets, interactive_output
from PIL import Image
from scipy.ndimage import gaussian_filter
import tkinter as tk
from tkinter import ttk
import mplcursors

#read data
data = pd.read_csv('TM24Szn(in).csv')

batter = 'batter right.png'

dates = data['Date'].unique()
pitchers = sorted(data['Pitcher'].unique())
batter_options = list(data['BatterSide'].unique())
batter_options.append("Both")
pitch_options = list(data['PitchCall'].unique())
pitch_options.insert(0, ("All"))

def update_pitcher(*args):
    selected_pitcher = pitcher_var.get()
    if selected_pitcher:
        pitcher_dates = data[data['Pitcher'] == selected_pitcher]['Date'].unique()
        date_dropdown['values'] = list(pitcher_dates)
        if len(pitcher_dates) > 0:
            date_var.set(pitcher_dates[0])
        else:
            date_var.set('')

        pitcher_calls = data[data['Pitcher'] == selected_pitcher]['PitchCall'].unique()
        call_dropdown['values'] = ["All"] + list(pitcher_calls)
        if len(pitcher_calls) > 0:
            call_var.set("All")
        else:
            call_var.set('')

#function to display plot
def plot_data(date, pitcher, batter_side, pitch_call):
  if batter_side == "Both":
    filtered_data = data[(data['Date'] == date) & (data['Pitcher'] == pitcher)] 
  else:
    filtered_data = data[(data['Date'] == date) & (data['Pitcher'] == pitcher ) & (data['BatterSide']==batter_side)]

  if pitch_call != "All":
    filtered_data = filtered_data[filtered_data['PitchCall'] == pitch_call] 

  x = [-0.85, -0.85, 0.85, 0.85, -0.85]
  y = [1.6, 3.5, 3.5, 1.6, 1.6]

  pitch_colors = {'Fastball': 'red', 'Slider': 'blue', 'Curveball': 'green', 'Sinker':"purple", 'Splitter': 'yellow', 'ChangeUp': 'orange', 'Cutter': 'grey'}
  colors = filtered_data['TaggedPitchType'].map(pitch_colors).fillna('black')
  
  fig, ax=plt.subplots(figsize=(10, 10))

  if batter_side == "Right":
    img = Image.open(batter)
    ax.imshow(img, extent=[-0.5, 4, -0.2, 5.2])
  elif batter_side == "Left":
    img = Image.open(batter)
    ax.imshow(img, extent=[0.5,-4, -0.2, 5.2])

  ax.scatter(x, y,)
  ax.plot(x, y, 'bo-', color="black")
  ax.grid(True)
  x_ticks = [i * 0.5 for i in range(int(min(x) * 10) - 20, int(max(x) * 10) + 21)]
  y_ticks = [i * 0.5 for i in range(int(min(y) * 10) - 20, int(max(y) * 10) + 21)]
  ax.set_xticks(x_ticks)
  ax.set_yticks(y_ticks)
  ax.set_xlim(-3,3)
  ax.set_ylim(0,5)
  ax.set_aspect('auto')
  plt.xlabel('PlateLocSide')
  plt.ylabel('PlateLocHeight')
  plt.title(f'Date: {date}, Pitcher: {pitcher}, Batter Side: {batter_side}, Pitch Call: {pitch_call}')
  legend_handles = [plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=color, markersize=10, label=pitch) for pitch, color in pitch_colors.items()]
  ax.legend(handles=legend_handles, title="Pitch Types", loc='upper right')
  plt.scatter(filtered_data['PlateLocSide'], filtered_data['PlateLocHeight'], c=colors, marker='o', s=60, edgecolors="black", picker=True, zorder=5 )

  def on_key(event):
    if event.key == 'escape':
        for annotation in ax.texts:
            annotation.remove()
        plt.draw()
# Connect the key press event to the handler
  fig.canvas.mpl_connect('key_press_event', on_key)
  def on_pick(event):
    for annotation in ax.texts:
        annotation.remove()
    ind = event.ind[0]
    row = filtered_data.iloc[ind]
    annotation = ax.annotate(
        f"Batter Side/Batter: {row['BatterSide']} {row['Batter']}\n"
        f"Pitch: {row['TaggedPitchType']}\n"
        f"Speed: {row['RelSpeed']:.2f}\n"
        f"Side: {row['PlateLocSide']:.2f}\n"
        f"Height: {row['PlateLocHeight']:.2f}\n"
        f"Horizontal Break: {row['HorzBreak']:.2f}\n"
        f"Vertical Break: {row['VertBreak']:.2f}\n"
        f"Induced Vertical Break: {row['InducedVertBreak']:.2f}\n"
        f"Pitch Call: {row['PitchCall']}",
        xy=(row['PlateLocSide'], row['PlateLocHeight']),
        xytext=(20, 20),
        textcoords='offset points',
        bbox=dict(boxstyle="round", fc="w"),
        arrowprops=dict(arrowstyle="->"),
        zorder=10
    )
    plt.draw()
    
  fig.canvas.mpl_connect('pick_event', on_pick)


def plot_heat(date, pitcher, batter_side, pitch_call):
  if batter_side == "Both":
    filtered_data = data[(data['Date'] == date) & (data['Pitcher'] == pitcher)] 
  else:
    filtered_data = data[(data['Date'] == date) & (data['Pitcher'] == pitcher ) & (data['BatterSide']==batter_side)] 

  if pitch_call != "All":
    filtered_data = filtered_data[filtered_data['PitchCall'] == pitch_call]

  x = [-0.85, -0.85, 0.85, 0.85, -0.85]
  y = [1.6, 3.5, 3.5, 1.6, 1.6]

  pitch_colors = {'Fastball': 'red', 'Slider': 'blue', 'Curveball': 'green', 'Sinker':"purple", 'splitter': 'yellow', 'changeup': 'orange', 'cutter': 'grey'}
  colors = filtered_data['TaggedPitchType'].map(pitch_colors).fillna('black')
  fig, ax=plt.subplots(figsize=(11, 11))

  if batter_side == "Right":
    img = Image.open(batter)
    ax.imshow(img, extent=[-0.5, 4, -0.2, 5.2], zorder=2)
  elif batter_side == "Left":
    img = Image.open(batter)
    ax.imshow(img, extent=[0.5,-4, -0.2, 5.2], zorder=2)

  ax.scatter(x, y)
  ax.plot(x, y, 'bo-')

  counts, xedges, yedges = np.histogram2d(
        filtered_data['PlateLocSide'],
        filtered_data['PlateLocHeight'],
        bins=[50, 50],
        range=[[-3, 3], [0, 5]]
    )

  smoothed_counts = gaussian_filter(counts, sigma=1.5)  # Adjust sigma for more/less smoothing
  im = ax.imshow(
      smoothed_counts.T,
      extent=[-3, 3, 0, 5],
      origin='lower',
      aspect='auto',
      cmap='plasma',
      interpolation='bilinear',  # Try 'bicubic' or 'gaussian' for smoother results
      zorder=0
  )
  cb = fig.colorbar(im, ax=ax)
  cb.set_label('frequency')
  ax.set_xlim(-3, 3)
  ax.set_ylim(0, 5)
  plt.xlabel('PlateLocSide')
  plt.ylabel('PlateLocHeight')
  plt.title(f'HeatMap Date: {date}, Pitcher: {pitcher}, Batter Side: {batter_side}, Pitch Call: {pitch_call}')
  plt.show(block=False)

root = tk.Tk()
root.title("Pitch Heatmap Selector")

# Dropdown for pitcher
pitcher_var = tk.StringVar()
pitcher_dropdown = ttk.Combobox(root, textvariable=pitcher_var)
pitcher_dropdown['values'] = list(pitchers)
pitcher_dropdown.grid(row=1, column=1)
pitcher_dropdown.set(pitchers[0] if len(pitchers) > 0 else "")
pitcher_var.trace('w', update_pitcher)

# Dropdown for date
date_var = tk.StringVar()
date_dropdown = ttk.Combobox(root, textvariable=date_var)
date_dropdown.grid(row=0, column=1)

# Dropdown for batter side
batter_var = tk.StringVar()
batter_dropdown = ttk.Combobox(root, textvariable=batter_var)
batter_dropdown['values'] = batter_options
batter_dropdown.grid(row=2, column=1)
batter_dropdown.set(batter_options[0])

#dropdown for pitch call
call_var = tk.StringVar()
call_dropdown = ttk.Combobox(root, textvariable=call_var)
call_dropdown.grid(row=3, column=1)

# Labels
ttk.Label(root, text="Select Date:").grid(row=0, column=0)
ttk.Label(root, text="Select Pitcher:").grid(row=1, column=0)
ttk.Label(root, text="Select Batter Side:").grid(row=2, column=0)
ttk.Label(root, text="Select Pitch Call:").grid(row=3, column=0)

# Button to plot
def on_plot():
    date = date_var.get()
    pitcher = pitcher_var.get()
    batter_side = batter_var.get()
    pitch_call = call_var.get()
    plot_data(date, pitcher, batter_side, pitch_call)
    plot_heat(date, pitcher, batter_side, pitch_call)

plot_button = ttk.Button(root, text="Plot", command=on_plot)
plot_button.grid(row=4, column=0, columnspan=2)

update_pitcher()
root.mainloop()